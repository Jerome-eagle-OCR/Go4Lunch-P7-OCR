plugins {
    id 'com.android.application'
    id 'com.google.gms.google-services'  // Google Services plugin
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.jr_eagle_ocr.go4lunch"
        minSdk 19
        targetSdk 30
        versionCode 1
        versionName "1.0"
        multiDexEnabled true

        // For Google Firebase/Maps/Places
        buildConfigField 'String', 'GOOGLE_PLACES_KEY', OCR_P7_Google_Places_web_key
        it.resValue 'string', 'google_places_key', OCR_P7_Google_Places_sdk_key

        // For testing
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        testInstrumentationRunnerArguments clearPackageData: 'true'
        buildConfigField "java.util.concurrent.atomic.AtomicBoolean", "IS_TESTING", "new java.util.concurrent.atomic.AtomicBoolean(false)"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures {
        viewBinding true
    }
    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled = true
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'
    implementation 'androidx.navigation:navigation-fragment:2.3.5'
    implementation 'androidx.navigation:navigation-ui:2.3.5'

    // Worker for Notifications
    implementation 'androidx.work:work-runtime:2.7.1'

    //GLIDE
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'

    //EASY PERMISSIONS
    implementation 'pub.devrel:easypermissions:3.0.0'

    // FIREBASE
    implementation platform('com.google.firebase:firebase-bom:29.0.0')
    implementation 'com.google.firebase:firebase-analytics'

    // FIREBASE UI
    implementation 'com.firebaseui:firebase-ui-auth:7.2.0'

    // Facebook login support
    implementation 'com.facebook.android:facebook-android-sdk:12.0.0'

    // FIRESTORE
    implementation 'com.google.firebase:firebase-firestore'

    // GOOGLE MAPS
    implementation 'com.google.android.gms:play-services-maps:18.0.0'
    implementation 'com.google.android.gms:play-services-location:18.0.0'

    // GOOGLE PLACES
    //noinspection GradleDependency
    implementation 'com.google.android.libraries.places:places:2.4.0'
    implementation 'com.android.volley:volley:1.2.1'

    // GOOGLE GSON
    implementation 'com.google.code.gson:gson:2.8.9'

    // RETROFIT
//    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    // RXJAVA
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.21'

    //--------------------------------------------------------------------
    // For testing
    //--------------------------------------------------------------------
    // Mockito
    testImplementation 'org.mockito:mockito-core:3.11.2'
    testImplementation 'org.mockito:mockito-inline:3.11.2'
    androidTestImplementation "org.mockito:mockito-android:3.11.2"
    // Orchestrator to have app cleaned between tests
    androidTestUtil 'androidx.test:orchestrator:1.4.1'
    // Executor
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    androidTestImplementation 'androidx.arch.core:core-testing:2.1.0'
    // Junit4
//    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    // Espresso
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    //--------------------------------------------------------------------
}


// JaCoCo stuff
android.applicationVariants.all { variant ->
    def variantName = variant.name.capitalize()
    def filesToAnalyze = [
            '**/*ViewModel.class',
            '**/*Repository.class'
    ]

    task("jacoco${variantName}Report", type: JacocoReport, dependsOn: "test${variantName}UnitTest") {
        group 'Reporting'
        description "Generate ${variantName} Jacoco coverage reports."

        def htmlOutDir = layout.buildDirectory.dir("reports/jacoco/$name/html").get().asFile

        doLast {
            openReport htmlOutDir
        }

        reports {
            xml.enabled = true
            html {
                destination htmlOutDir
            }
        }

        getSourceDirectories().setFrom(files(android.sourceSets.main.java.srcDirs))
        getExecutionData().setFrom(files("${buildDir}/jacoco/test${variantName}UnitTest.exec"))
        getClassDirectories().setFrom(fileTree(dir: variant.javaCompiler.destinationDir, includes: filesToAnalyze))
    }
}

// Open JaCoCo report after generation
def openReport(htmlOutDir) {
    final reportPath = "$htmlOutDir\\index.html"

    println "HTML Report: $reportPath"

    def os = org.gradle.internal.os.OperatingSystem.current()
    if (os.isWindows()) {
        exec { commandLine 'cmd', '/c', "start $reportPath" }
    } else if (os.isMacOsX()) {
        exec { commandLine 'open', "$reportPath" }
    } else if (os.isLinux()) {
        try {
            exec { commandLine 'xdg-open', "$reportPath" }
        } catch (Exception ignored) {
            if (localProperties.containsKey("linux-html-cmd")) {
                exec { commandLine properties.get("linux-html-cmd"), "$reportPath" }
            } else {
                println "'linux-html-cmd' property could not be found in 'local.properties'"
            }
        }
    }
}